import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as l,j as s}from"./app-CfT7vpBI.js";const a={},n=s(`<h1 id="基本规则" tabindex="-1"><a class="header-anchor" href="#基本规则"><span>基本规则</span></a></h1><h2 id="清除浮动" tabindex="-1"><a class="header-anchor" href="#清除浮动"><span>清除浮动</span></a></h2><ol><li>父级包裹浮动盒子元素用<code>overflow:hidden</code>清除</li><li><code>clear:both;</code>清除两边的浮动</li><li>BFC 独立：有包裹性(不设置宽高)</li><li>BFC 子元素的任何排版不影响</li><li>触发 BFC：绝对,相对定位<code>display:table;</code></li><li>触发 BFC：只要不是<code>overflow:visible;</code></li></ol><h2 id="定位" tabindex="-1"><a class="header-anchor" href="#定位"><span>定位</span></a></h2><p>子绝父相定位</p><ul><li><code>相对定位relative</code>:相对于原来位置移动</li><li><code>绝对定位absolute</code>:相对于 relative 特性的父容器定位</li><li><code>相对定位</code>:只改变位置不影响文档流布局;</li><li><code>绝对定位</code>:包裹性:实际内容撑开;破坏性:脱离文档流; 悬浮性:在原始流之上;</li><li>当元素的 position 设置为<code>relative</code>时，它允许你通过 CSS 指定该元素在当前普通流页面下的相对偏移量。</li><li>CSS 的 position 属性的取值选项<code>absolute</code>，absolute 相对于其包含块定位。和 relative 定位不一样，absolute 定位会将元素从当前的文档流里面移除，周围的元素会忽略它。</li><li>absolute 定位比较特殊的一点是元素的定位参照于最近的已定位祖先元素。如果它的父元素没有添加定位规则（默认是 position:relative;）,浏览器会继续寻找直到默认的 body 标签。</li><li><code>fixed定位</code>，它是一种特殊的绝对（absolute）定位，区别是其包含块是浏览器窗口。</li><li><code>float:浮动定位</code></li><li><code>z-index属性</code>指定元素的堆叠次序。z-index 的取值是整数，数值大的元素优先于数值小的元素显示。</li><li>使用 <code>margin 属性</code>将元素水平居中</li></ul><h2 id="背景图" tabindex="-1"><a class="header-anchor" href="#背景图"><span>背景图</span></a></h2><ul><li>background-repeat:;平铺</li><li>background-position:;图片起始位置</li><li>background-attachment:;是否滚动 默认 scroll; fixed 保持不动; background 背景图合写:背景颜色,背景图地址,平铺地址,背景图滚动,背景图位置;</li></ul><h2 id="精灵图" tabindex="-1"><a class="header-anchor" href="#精灵图"><span>精灵图</span></a></h2><p>三中实现对齐方式：</p><ul><li>background-position:x,y;</li><li>对齐方式:display:inline-block;</li><li>浮动 默认为块级元素 然后定位(不推荐)</li></ul><h2 id="css-内容移出某区域" tabindex="-1"><a class="header-anchor" href="#css-内容移出某区域"><span>CSS 内容移出某区域</span></a></h2><p>常用于 logo 优化：</p><ul><li>利用 text-indent:-2000em;(首行缩进)</li><li>利用 padding 挤开盒子并且 overflow 切割;</li><li>利用 margin 拉动盒子配合 overflow;</li><li>line-height;行高</li></ul><h2 id="text-特征" tabindex="-1"><a class="header-anchor" href="#text-特征"><span>text 特征</span></a></h2><ul><li>text-align:justify;两端对齐,(水平对齐方式);</li><li>vertical-align:;垂直对齐方式;(sub,super 上下)</li><li>line-height:;设置对象的行高;</li><li>text-indent 文本缩进,可以为负值;</li><li><code>text-justify</code>检索或者调整文本使用的对齐方式</li><li>CSS 里面的 text-align 属性可以控制文本的对齐方式。</li><li>术语：Horizontal Rule =&gt; hr =&gt; 水平线</li><li>术语：Strikethrough =&gt; s =&gt; 删除线</li><li>术语：emphasis =&gt; em =&gt; 强调</li><li>术语：Underline =&gt; u =&gt; 下划线</li><li>术语：Strong =&gt; s =&gt; 加粗,强调</li><li>b ==&gt;只是加粗</li></ul><h2 id="阴影" tabindex="-1"><a class="header-anchor" href="#阴影"><span>阴影</span></a></h2><ul><li>box-shadow 属性的每个阴影依次由下面这些值描述：</li><li>offset-x 阴影的水平偏移量；</li><li>offset-y 阴影的垂直偏移量;</li><li>blur-radius 模糊距离；</li><li>spread-radius 阴影尺寸；</li><li>颜色(其中 blur-raduis 和 spread-raduis 是可选的)</li><li>css 中,<code>opacity属性</code>用来设置元素的透明度。</li><li>CSS 提供<code>line-height属性</code>来设置行间的距离。行高，顾名思义，用来设置每行文字所占据的垂直空间。</li><li>超链接可以使用:hover 伪类选择器定义它的悬停状态样式</li></ul><h2 id="hsl-颜色描述" tabindex="-1"><a class="header-anchor" href="#hsl-颜色描述"><span>hsl 颜色描述</span></a></h2><ul><li>CSS3 引入了对应的 hsl()属性做为对应的颜色描述方式。描述了色相（hue）、饱和度（saturation）、亮度（lightness）</li><li><code>色相</code>是色彩的基本属性，就是平常所说的颜色名称，如红色、黄色等。以颜色光谱为例，光谱左边从红色开始，移动到中间的绿色，一直到右边的蓝色，色相值就是沿着这条线的取值。在 hsl()里面，色相用色环来代替光谱，色相值就是色环里面的颜色对应的从 0 到 360 度的角度值。</li><li><code>饱和度</code>是指色彩的纯度，也就是颜色里灰色的占比，越高色彩越纯，低则逐渐变灰，取 0-100%的数值。</li><li><code>亮度</code>决定颜色的明暗程度，也就是颜色里白色或者黑色的占比，100% 亮度是白色， 0% 亮度是黑色，而 50% 亮度是“一般的”。</li></ul><h2 id="渐变色" tabindex="-1"><a class="header-anchor" href="#渐变色"><span>渐变色</span></a></h2><ul><li>渐变色:::<code>background: linear-gradient(gradient_direction, 颜色 1, 颜色 2, 颜色 3, ...);</code></li><li>第一个参数指定了颜色过渡的方向- 它的值是角度，90deg 代表垂直渐变，45deg 的渐变角度和反斜杠方向一样,剩下的参数指定了渐变颜色的顺序</li><li>主要区别是<code>repeating-linear-gradient()</code>重复指定的渐变;</li><li>background 属性支持使用<code>url()函数</code>通过链接的方式引入一个指定纹理或样式的图片</li><li>CSS 属性 transform 里面的<code>scale()函数</code>，可以用来改变元素的显示比例。</li><li><code>transform属性是skewX,skewY</code>，skewX 使选择的元素沿着 X 轴（横向）翻转指定的角度。</li><li>术语表：blur-radius =&gt; 模糊半径</li><li>border-radius =&gt; 圆角边框。</li></ul><h2 id="选择器" tabindex="-1"><a class="header-anchor" href="#选择器"><span>选择器</span></a></h2><ul><li>选择一个祖先的所有子孙节点，例如 <code>div p{…}</code></li><li>选择一个父元素的所有直属节点，例如 <code>div &gt; p{…}</code></li><li>选择某一个元素紧挨着的兄弟节点，例如 <code>li + li{…}</code></li><li>选择某一个元素的所有同胞节点，例如 <code>span ~ a{…}</code></li><li>权重! 行间样式=1000--ID=100--class=10--标签=1--通配符=0</li></ul><h2 id="伪元素选择器" tabindex="-1"><a class="header-anchor" href="#伪元素选择器"><span>伪元素选择器</span></a></h2><ul><li>:before 和:after 伪类。这些伪类用来在选择元素之前和之后添加一些内容.</li><li>:before 和:after 必须配合 content 来使用。两个伪元素分别在真正元素的前后;</li></ul><h2 id="动画" tabindex="-1"><a class="header-anchor" href="#动画"><span>动画</span></a></h2><ul><li>如果要给元素添加动画，你需要了解 animation 属性以及@keyframes 规则。</li><li><code>animation-name</code>指定@keyframes 描述动画关键帧的 at 规则的名称。</li><li><code>animation-duration</code>配置动画完成一个循环所需的时间长度。</li><li><code>animation-timing-function</code>通过建立加速度曲线，动画如何通过关键帧进行转换。linear,ease;</li><li><code>ation-delay:</code>配置元素加载时间和动画序列开始之间的延迟。</li><li><code>animation-iteration-count</code>配置动画应重复的次数; 您可以指定 infinite 无限期重复动画。</li><li><code>animation-direction</code>配置动画是否应在每次运行序列中交替方向或重置为起点并重复自身。</li><li><code>animation-fill-mode</code>配置动画执行前后动画应用的值</li><li><code>animation-play-state</code>允许您暂停和恢复动画序列。(检索或设置对象的状态.)</li><li><code>@keyframes</code>规则控制动画中各阶段的变化:0%,50%,100%;</li><li><code>CSS 贝塞尔曲线</code>的例子：<code>animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75);</code></li></ul><h2 id="过渡-transition" tabindex="-1"><a class="header-anchor" href="#过渡-transition"><span>过渡 transition</span></a></h2><ul><li>transition-property:|指定 CSS 属性的 name，transition 效果</li><li>transition-duration:|transition 效果需要指定多少秒或毫秒才能完成</li><li>transition-timing-function:|指定 transition 效果的转速曲线</li><li>transition-delay:|定义 transition 效果开始的时候</li></ul><h2 id="语义化" tabindex="-1"><a class="header-anchor" href="#语义化"><span>语义化</span></a></h2><ul><li>图片的 alt 属性;</li><li>main 标签用于呈现网页的主体内容，且每个页面只能有一个。这意味着它只应包含与页面中心主题相关的信息，而不应包含如导航连接、网页横幅等可以在多个页面中重复出现的内容。</li><li>article 是一个分段标签，用于呈现独立及完整的内容。这个标签适用于博客入口、论坛帖子或者新闻文章。</li><li>section 用于对与主题相关的内容进行分组。它们可以根据需要嵌套着使用.</li><li>header 也是一个具有语义化的、提升页面可访问性的 HTML5 标签。它可以为父级标签呈现简介信息或者导航链接，适用于那些在多个页面顶部重复出现的内容</li><li>nav 也是一个具有语义化特性的 HTML5 标签，用于呈现页面中的主导航链接。它可以使屏幕阅读器快速识别页面中的导航信息。</li><li>footer 也具有语义化特性，可以使辅助设备快速定位到它。它位于页面底部，用于呈现版权信息或者相关文档链接。 使用 <code>audio 元素</code>提高音频内容的可访问性</li><li>HTML5 的 audio 标签用于呈现音频内容，它也具有语义化特性。可以在 audio 上下文中为音频内容添加文字说明或者字幕链接，使听觉障碍用户也能获取音频中的信息。</li><li>audio 支持 controls 属性，可以使浏览器为音频提供具有开始、暂停等功能的播放控件。controls 属性是一个布尔属性，只要这个属性出现在 audio 标签中，浏览器就会开启播放控件 使用 <code>figure 元素</code>提高图表的可访问性</li><li>HTML5 引入了 figure 标签以及与之相关的 figcaption 标签。它们一起用于展示可视化信息（如：图片、图表）及其标题 使用 <code>label 元素</code>提高表单的可访问性</li><li>label 标签用于呈现特定表单控件的文本，通常是选项的名称。这些文本代表了选项的含义，使表单具有更好的可读性。label 标签的 for 属性指定了与 label 绑定的表单控件，并且屏幕阅读器也会读取 for 属性</li><li>将单选按钮包裹在 <code>fieldset 元素</code>中以获得更好的可访问性</li><li>fieldset 标签将单选按钮组包含在里面就可以实现这个目的，通常还会使用 legend 标签来为单选按钮组提供文字说明。屏幕阅读器也可以朗读这些文字。</li><li>当选项的含义很明确时，如：性别选择，fieldset 标签与 legend 标签就可以省略。这时，使用含有 for 属性的 label 标签就足够了。</li><li>HTML5 引入了<code>date类型</code>来创建时间选择器:<input type="date" name="date">; 使用 HTML5 的 <code>datatime 属性</code>标准化时间</li><li>HTML5 还引入了 time 标签与 datetime 属性来标准化时间。time 是一个行内标签，用于在页面中呈现日期或时间，而 datetime 属性保存了日期的有效格式;</li><li><time datetime="2013-02-13">last Wednesday</time> 通过给元素添加 <code>accesskey 属性</code>来让用户可以在链接之间快速导航</li><li>HTML 提供 accesskey 属性，用于指定激活标签或者使标签获得焦点的快捷键，这可以使键盘用户的导航更加有效。</li><li>HTML 的<code>tabindex属性</code>有三个不同与标签焦点的功能。当它在标签上时，表示标签可以获得焦点。它的值可以是零、负整数及正整数，并决定了标签的行为</li><li>tabindex 属性还可以指定标签的 tab 键顺序，将它的值设置为大于或等于 1 就可以实现这个功能。</li></ul><h2 id="响应式-web-设计原则" tabindex="-1"><a class="header-anchor" href="#响应式-web-设计原则"><span>响应式 web 设计原则</span></a></h2><ul><li>四个不同的视窗单位分别是：</li><li>vh： 如 3vh 的意思是视窗高度的 3%。</li><li>vw：如 10vw 的意思是视窗宽度的 10%。</li><li>vmin： 如 70vmin 的意思是视窗中较小尺寸的 70% (高度 VS 宽度)。</li><li>vmax： 如 100vmax 的意思是视窗中较大尺寸的 100% (高度 VS 宽度)。</li></ul><h3 id="针对高分辨率屏幕应使用视网膜图片" tabindex="-1"><a class="header-anchor" href="#针对高分辨率屏幕应使用视网膜图片"><span>针对高分辨率屏幕应使用视网膜图片</span></a></h3><ul><li>为优化图片在高分辨率设备下的显示效果，最简单的方式是定义它们的 width 和 height 值为源文件宽高的一半。</li></ul><h3 id="使图片根据设备尺寸自如响应" tabindex="-1"><a class="header-anchor" href="#使图片根据设备尺寸自如响应"><span>使图片根据设备尺寸自如响应:</span></a></h3><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  max-width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  display: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">block</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  height: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>max-width</code> 属性能让图片以 100% 的最大宽度适应其父容器的宽度，但图片不会拉伸得比原始宽度还宽。</li><li>将 display 属性设置为 block 可以让 image 标签从内联元素（默认值）更改为块级元素。设置 height 属性为 auto 保持图片的原始宽高比。</li><li>下面是一个<code>媒体查询</code>的例子，当设备宽度小于或等于 100px 时返回内容：</li><li><code>@media (max-width: 100px) { /_ CSS Rules _/ }</code></li><li>以下定义的<code>媒体查询</code>，是当设备高度大于或等于 350px 时返回内容：</li><li><code>@media (min-height: 350px) { /_ CSS Rules _/ }</code></li></ul><h2 id="flex-布局" tabindex="-1"><a class="header-anchor" href="#flex-布局"><span>Flex 布局</span></a></h2><ul><li>display:flex; 会成为 flex 容器;</li><li>注意，设为 Flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</li></ul><h2 id="容器属性" tabindex="-1"><a class="header-anchor" href="#容器属性"><span>容器属性</span></a></h2><ul><li>flex-direction 主轴方向</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li><li><code>flex-direction属性</code>决定主轴方向 row 横向--&gt;, column 竖向,(逆序) row-reverse 和 column-reverse</li><li><code>flex-wrap属性</code> nowrap | wrap | wrap-reverse 倒序换行 是否换行</li><li><code>flex-flow属性</code>是 flex-direction 属性和 flex-wrap 属性的简写形式，默认值为 row nowrap</li><li><code>align-content</code>多行在交叉轴上的排列方式(有换行才有效果)<code>flex-start,center</code></li><li><code>justify-content属性</code>子元素沿<code>主轴</code>的对齐模式</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  flex-start</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">（默认值）：左对齐</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  flex-end</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">：右对齐</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  center： 居中</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  space-around</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  space-between</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">：两端对齐，项目之间的间隔都相等。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>align-items属性</code>子元素在<code>交叉轴</code>上如何对齐:flex-start | flex-end | center | baseline | stretch;</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  \`</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">flex-start</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\`从 flex 容器的前端开始排列项目。对行来说是把项目都靠顶部放，对于列是把项目都靠左放。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  \`</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">flex-end</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\`从flex 容器的后端开始排列项目。对行来说是把项目都靠底部放，对于列是把项目都靠右放。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  \`center\`把项目的位置调整到中间。对于行，垂直居中（项目上下方空间相等），对于列，水平居中（项目左右方空间相等）。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  \`baseline\`项目的内容的基线对齐</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">字体大小的最下面</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  \`</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">space-around</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\`每根轴线两侧的间隔都相等。所以轴线之间的间隔比轴线与边框的间隔大一倍。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  \`</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">space-between</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\`与交叉轴两端对齐，轴线之间的间隔平均分布。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\`  stretch\`拉伸项目，填满 flex 容器。例如排成行的项目从容器顶部拉伸到底部。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="项目的属性" tabindex="-1"><a class="header-anchor" href="#项目的属性"><span>项目的属性</span></a></h2><ul><li>order</li><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li><li>flex</li><li>align-self</li><li><code>order属性</code>定义项目的排列顺序。数值越小，排列越靠前，默认为 0</li><li><code>flex-grow属性</code>如何分配剩余空间，默认为 0，如果存在剩余空间，也不放大</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  数值相同,分配一样</span></span>
<span class="line"><span>  数值谁大谁多,可接受小数</span></span>
<span class="line"><span>  剩余空间的分配</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>flex-shrink属性</code>定义了项目剩余空间缩小比例，默认为 1，即如果空间不足，该项目将缩小；0 则不压缩，负值则无效</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>剩余空间不足谁缩放的多</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>flex-basis属性</code>定义了在分配多余空间之前，项目占据的主轴空间,它的默认值为 auto</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>width:分配之前先减去设置的空间</span></span>
<span class="line"><span>0不占用空间</span></span>
<span class="line"><span>auto默认样式,项目的内容尺寸为font-basis</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>flex属性</code>是 flex-grow, shrink,basis 的简写，属性有两个快捷值：1 0 auto 和 none (0 0 auto)</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>flex:1=1 1 0; flex=2:2 1 0;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>align-self属性</code>允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性</li><li>默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch</li></ul><h2 id="grid-布局" tabindex="-1"><a class="header-anchor" href="#grid-布局"><span>Grid 布局</span></a></h2><ul><li>display 的值设为 grid，使 HTML 元素变为网格容器</li><li>grid-template-columns:50px 50px;属性可以添加一些列,属性值的个数表示网格的列数，而每个值表示对应列的宽度</li><li>grid-template-rows 为网格设置行数,同上规则;</li><li>CSS 网格中，可以使用绝对定位和相对定位单位如 px 和 em 来确定行或列的大小。下面的单位也可以使用：</li><li>fr：设置列或行占剩余空间的一个比例，</li><li>auto：设置列宽或行高自动等于它的内容的宽度或高度，</li><li>%：将列或行调整为它的容器宽度或高度的百分比，</li><li><code>grid-column-gap</code> 创建多列之间的间距</li><li><code>grid-row-gap</code> 创建多行之间的间距</li><li><code>grid-gap</code>是 grid-row-gap 和 grid-column-gap 的简写,如果有两个值，第一个值将作为行间隙的高度值，第二个值是列间隙的宽度值。</li><li><code>grid-column</code>属性定义网格项开始和结束的位置，进而控制每个网格项占用的列数。</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">grid-column</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">: 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> / 3;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">grid-row</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">: 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> / 3;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>用grid-row</code>属性来确定开始和结束的水平线,(占用的行数)</li><li><code>justify-self属性</code>，设置其内容的位置在单元格内沿行轴对齐的方式(stretch 默认,start 左,center 中,end)</li><li><code>align-self属性</code>,沿列轴对齐的方式排列,上中下</li><li>对网格容器使用<code>justify-items</code>使它们一次性沿行轴对齐。</li><li>对网格容器使用<code>align-items</code>属性可以给网格中所有的网格项设置沿列轴对齐的方式。</li><li>将网格中的一些网格单元格组合成一个区域（area），并为该区域指定一个自定义名称。你可以通过给容器加上 grid-template-areas 来实现：</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">grid-template-areas</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  &quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">header</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> header</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> header&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  &quot;advert </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">content</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> content&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  &quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">footer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> footer</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> footer&quot;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在为网格容添加区域模板后，对网格项使用<code>grid-area</code>可以通过添加你定义的名称将网格项放入自定义区域。</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.item1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  grid-area: header;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>网格中没有定义区域模板，你也可以像这样为它添加一个模板<code>grid-area: 起始水平线 / 起始垂直线 / 末尾水平线 / 终止垂直线 ;</code></p></li><li><p>使用<code>repeat方法</code>指定行或列的重复次数，后面加上逗号以及需要重复的值:</p></li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">这里有一个添加 100 行网格的例子，使每行高度均为 50px:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">grid-template-rows</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">: repeat(100</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 50px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">你还可以用 repeat 方法重复多个值，并在定义网格结构时与其他值一起使用。举个例子：</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">grid-template-columns</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">: repeat(2</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 1fr 50px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) 20</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">px;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">效果相当于:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">grid-template-columns</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">: 1fr 50px 1fr 50px 20px;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">注意:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">1fr 50px重复了两次，后面跟着 20px</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>内置函数<code>minmax</code>也可以可用于设置 grid-template-columns 和 grid-template-rows 的值。它的作用是在网格容器改变大小时限制网格项的大小。为此，你需要指定网格项允许的尺寸范围</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">grid-template-columns</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">: 100px minmax(50px</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 200px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">grid-template-columns</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 被设置为添加两列，第一列 100px 宽，第二列宽度最小值是 50px，最大值是 200px。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>重复方法带有一个名为自动填充<code>auto-fill</code>的功能，功能是根据容器的大小，尽可能多地放入指定大小的行或列。你可以通过结合<code>auto-fill</code>和<code>minmax</code>来更灵活地布局</li><li><code>auto-fit</code>效果几乎和<code>auto-fill</code>一样，不同点仅在于，当容器的大小大于各网格项之和时，<code>auto-fill</code> 将会持续地在一端放入空行或空列，这样就会使所有网格项挤到另一边</li><li>而<code>auto-fit</code>则不会在一端放入空行或空列，而是会将所有网格项拉伸至合适的大小。</li></ul>`,68),t=[n];function d(r,h){return l(),e("div",null,t)}const p=i(a,[["render",d],["__file","CSS基础.html.vue"]]),k=JSON.parse('{"path":"/CSS/CSS%E5%9F%BA%E7%A1%80.html","title":"CSS 基础","lang":"zh-CN","frontmatter":{"title":"CSS 基础","date":"2021-03-09T11:30:52.000Z","tags":"CSS","categories":["学习笔记"],"description":"基本规则 清除浮动 父级包裹浮动盒子元素用overflow:hidden清除 clear:both;清除两边的浮动 BFC 独立：有包裹性(不设置宽高) BFC 子元素的任何排版不影响 触发 BFC：绝对,相对定位display:table; 触发 BFC：只要不是overflow:visible; 定位 子绝父相定位 相对定位relative:相对于...","head":[["meta",{"property":"og:url","content":"https://github.com/zxl7/zxl7.github.io/CSS/CSS%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"逆水行舟丨"}],["meta",{"property":"og:title","content":"CSS 基础"}],["meta",{"property":"og:description","content":"基本规则 清除浮动 父级包裹浮动盒子元素用overflow:hidden清除 clear:both;清除两边的浮动 BFC 独立：有包裹性(不设置宽高) BFC 子元素的任何排版不影响 触发 BFC：绝对,相对定位display:table; 触发 BFC：只要不是overflow:visible; 定位 子绝父相定位 相对定位relative:相对于..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-01T14:31:04.000Z"}],["meta",{"property":"article:author","content":"逆水行舟丨"}],["meta",{"property":"article:published_time","content":"2021-03-09T11:30:52.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-01T14:31:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CSS 基础\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-03-09T11:30:52.000Z\\",\\"dateModified\\":\\"2024-09-01T14:31:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"逆水行舟丨\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"清除浮动","slug":"清除浮动","link":"#清除浮动","children":[]},{"level":2,"title":"定位","slug":"定位","link":"#定位","children":[]},{"level":2,"title":"背景图","slug":"背景图","link":"#背景图","children":[]},{"level":2,"title":"精灵图","slug":"精灵图","link":"#精灵图","children":[]},{"level":2,"title":"CSS 内容移出某区域","slug":"css-内容移出某区域","link":"#css-内容移出某区域","children":[]},{"level":2,"title":"text 特征","slug":"text-特征","link":"#text-特征","children":[]},{"level":2,"title":"阴影","slug":"阴影","link":"#阴影","children":[]},{"level":2,"title":"hsl 颜色描述","slug":"hsl-颜色描述","link":"#hsl-颜色描述","children":[]},{"level":2,"title":"渐变色","slug":"渐变色","link":"#渐变色","children":[]},{"level":2,"title":"选择器","slug":"选择器","link":"#选择器","children":[]},{"level":2,"title":"伪元素选择器","slug":"伪元素选择器","link":"#伪元素选择器","children":[]},{"level":2,"title":"动画","slug":"动画","link":"#动画","children":[]},{"level":2,"title":"过渡 transition","slug":"过渡-transition","link":"#过渡-transition","children":[]},{"level":2,"title":"语义化","slug":"语义化","link":"#语义化","children":[]},{"level":2,"title":"响应式 web 设计原则","slug":"响应式-web-设计原则","link":"#响应式-web-设计原则","children":[{"level":3,"title":"针对高分辨率屏幕应使用视网膜图片","slug":"针对高分辨率屏幕应使用视网膜图片","link":"#针对高分辨率屏幕应使用视网膜图片","children":[]},{"level":3,"title":"使图片根据设备尺寸自如响应:","slug":"使图片根据设备尺寸自如响应","link":"#使图片根据设备尺寸自如响应","children":[]}]},{"level":2,"title":"Flex 布局","slug":"flex-布局","link":"#flex-布局","children":[]},{"level":2,"title":"容器属性","slug":"容器属性","link":"#容器属性","children":[]},{"level":2,"title":"项目的属性","slug":"项目的属性","link":"#项目的属性","children":[]},{"level":2,"title":"Grid 布局","slug":"grid-布局","link":"#grid-布局","children":[]}],"git":{"createdTime":1725185369000,"updatedTime":1725201064000,"contributors":[{"name":"zxl7","email":"zhengxuelin@yhbj.cn","commits":1}]},"readingTime":{"minutes":15.89,"words":4768},"filePathRelative":"CSS/CSS基础.md","localizedDate":"2021年3月9日","excerpt":"\\n<h2>清除浮动</h2>\\n<ol>\\n<li>父级包裹浮动盒子元素用<code>overflow:hidden</code>清除</li>\\n<li><code>clear:both;</code>清除两边的浮动</li>\\n<li>BFC 独立：有包裹性(不设置宽高)</li>\\n<li>BFC 子元素的任何排版不影响</li>\\n<li>触发 BFC：绝对,相对定位<code>display:table;</code></li>\\n<li>触发 BFC：只要不是<code>overflow:visible;</code></li>\\n</ol>\\n<h2>定位</h2>\\n<p>子绝父相定位</p>\\n<ul>\\n<li><code>相对定位relative</code>:相对于原来位置移动</li>\\n<li><code>绝对定位absolute</code>:相对于 relative 特性的父容器定位</li>\\n<li><code>相对定位</code>:只改变位置不影响文档流布局;</li>\\n<li><code>绝对定位</code>:包裹性:实际内容撑开;破坏性:脱离文档流; 悬浮性:在原始流之上;</li>\\n<li>当元素的 position 设置为<code>relative</code>时，它允许你通过 CSS 指定该元素在当前普通流页面下的相对偏移量。</li>\\n<li>CSS 的 position 属性的取值选项<code>absolute</code>，absolute 相对于其包含块定位。和 relative 定位不一样，absolute 定位会将元素从当前的文档流里面移除，周围的元素会忽略它。</li>\\n<li>absolute 定位比较特殊的一点是元素的定位参照于最近的已定位祖先元素。如果它的父元素没有添加定位规则（默认是 position:relative;）,浏览器会继续寻找直到默认的 body 标签。</li>\\n<li><code>fixed定位</code>，它是一种特殊的绝对（absolute）定位，区别是其包含块是浏览器窗口。</li>\\n<li><code>float:浮动定位</code></li>\\n<li><code>z-index属性</code>指定元素的堆叠次序。z-index 的取值是整数，数值大的元素优先于数值小的元素显示。</li>\\n<li>使用 <code>margin 属性</code>将元素水平居中</li>\\n</ul>","autoDesc":true}');export{p as comp,k as data};
