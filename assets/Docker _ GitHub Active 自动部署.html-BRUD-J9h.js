import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as n,j as a}from"./app-BpXrtvAp.js";const e="/assets/img1-D4f8A4a5.jpg",l={},t=a(`<h2 id="docker-介绍-🐳" tabindex="-1"><a class="header-anchor" href="#docker-介绍-🐳"><span>Docker 介绍 🐳</span></a></h2><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><ul><li><strong>镜像（Image）</strong> ：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</li><li><strong>容器（Container）</strong> ：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li><li><strong>仓库（Repository）</strong> ：仓库可看成一个代码控制中心，用来保存镜像。</li></ul><h3 id="docker-命令-🐳" tabindex="-1"><a class="header-anchor" href="#docker-命令-🐳"><span>Docker 命令 🐳</span></a></h3><ul><li><code>docker ps -a</code> 查看所有容器</li><li><code>docker images</code> 查看所有镜像</li><li><code>docker stop [name/id]</code> 停止容器</li><li><code>docker rm [name/id]</code> 删除容器,加 <code>-f</code> 是强制删除</li><li><code>docker inspect [name/id]</code> 获取容器/镜像的元数据</li><li><code>docker logs e</code> 日志</li><li><code>docker exec -it [name/id] /bin/sh</code></li><li><code>docker run -p 81:80 -d --name [name] nginx</code> 启动容器</li><li><code>docker run -p 81:80 -d -v /Users/zxl/:/usr/share/nginx/html --name [name] nginx</code><ul><li>-p 端口映射</li><li>-V 数据卷，文件映射</li><li>-d 后台运行</li><li><code>--name</code> 定义容器名称</li></ul></li><li><code>docker login -u 用户名 -p 密码</code> 登录仓库</li></ul><h2 id="docker-部署-🐳" tabindex="-1"><a class="header-anchor" href="#docker-部署-🐳"><span>Docker 部署 🐳</span></a></h2><p><strong>原理：本地打包 docker 镜像，然后上传到 docker 镜像服务器，然后在服务器上登录 docker 账号拉取镜像，最后启动容器，完成部署 ✅</strong></p><ol><li><p>安装  <a href="https://www.docker.com/get-started" target="_blank" rel="noopener noreferrer">Docker</a></p></li><li><p>在项目根目录创建  <code>Dockerfile</code>  文件</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>FROM node:14</span></span>
<span class="line"><span>COPY ./ /app</span></span>
<span class="line"><span>WORKDIR /app</span></span>
<span class="line"><span>RUN yarn install &amp;&amp; yarn build</span></span>
<span class="line"><span></span></span>
<span class="line"><span>FROM nginx</span></span>
<span class="line"><span>RUN mkdir /app</span></span>
<span class="line"><span>COPY --from=0 /app/dist /app</span></span>
<span class="line"><span>COPY nginx.conf /etc/nginx/nginx.conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在项目根目录创建  <code>.dockerignore</code>  文件</p><ul><li>设置  <code>.dockerignore</code>  文件能防止  <code>node_modules</code>  和其他中间构建产物被复制到镜像中导致构建问题。</li></ul><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>**/node_modules</span></span>
<span class="line"><span>**/dist</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在项目根目录创建  <code>nginx.conf</code>  文件</p><ul><li><code>Nginx</code>  是一个能在 Docker 容器中运行的 HTTP(s) 服务器。它使用配置文件决定如何提供内容、要监听的端口等。参阅  <a href="https://www.nginx.com/resources/wiki/start/topics/examples/full/" target="_blank" rel="noopener noreferrer">Nginx 设置文档</a>  以了解所有可能的设置选项。</li><li>下面是一个简单的  <code>Nginx</code>  设置文件，它会在  <code>80</code>  端口上提供你的 Vue 项目。<code>页面未找到</code> / <code>404</code>  错误使用的是  <code>index.html</code>，这让我们可以使用基于  <code>pushState()</code>  的路由。</li></ul><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>user  nginx;</span></span>
<span class="line"><span>worker_processes  1;</span></span>
<span class="line"><span>error_log  /var/log/nginx/error.log warn;</span></span>
<span class="line"><span>pid        /var/run/nginx.pid;</span></span>
<span class="line"><span>events {</span></span>
<span class="line"><span>  worker_connections  1024;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>http {</span></span>
<span class="line"><span>  include       /etc/nginx/mime.types;</span></span>
<span class="line"><span>  default_type  application/octet-stream;</span></span>
<span class="line"><span>  log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span></span>
<span class="line"><span>                    &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span></span>
<span class="line"><span>                    &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span></span>
<span class="line"><span>  access_log  /var/log/nginx/access.log  main;</span></span>
<span class="line"><span>  sendfile        on;</span></span>
<span class="line"><span>  keepalive_timeout  65;</span></span>
<span class="line"><span>  server {</span></span>
<span class="line"><span>    listen       80;</span></span>
<span class="line"><span>    server_name  localhost;</span></span>
<span class="line"><span>    location / {</span></span>
<span class="line"><span>      root   /app;</span></span>
<span class="line"><span>      index  index.html;</span></span>
<span class="line"><span>      try_files $uri $uri/ /index.html;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    error_page   500 502 503 504  /50x.html;</span></span>
<span class="line"><span>    location = /50x.html {</span></span>
<span class="line"><span>      root   /usr/share/nginx/html;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>打包镜像并上传</p><ul><li>[name] 就是镜像名称</li><li>[images-name]就是在 Docker Hub 创建的镜像名称</li></ul><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#deploy.sh</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker build --platform linux/amd64 -t [name]:latest .</span></span>
<span class="line"><span>docker tag [name]:latest [images-name]</span></span>
<span class="line"><span>docker push [images-name]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>服务器操作</p><ul><li>执行脚本<code>./deploy.sh</code></li><li>主要操作就是拉取镜像，暂停容器，删除容器，重新运行镜像</li><li>最后清除一下没有使用的容器和镜像</li><li>后期优化也可以用 <code>docker-compose</code> 来做更新操作</li></ul><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#deploy.sh</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker pull [images-name]</span></span>
<span class="line"><span>docker stop [name]</span></span>
<span class="line"><span>docker rm [name]</span></span>
<span class="line"><span>docker run --name [name] -d -p 8081:80 [images-name]</span></span>
<span class="line"><span>docker image prune -f</span></span>
<span class="line"><span>docker container prune -f</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="github-active-自动部署-🐢" tabindex="-1"><a class="header-anchor" href="#github-active-自动部署-🐢"><span>GitHub Active 自动部署 🐢</span></a></h2><p><strong>原理: 通过监听代码变化，触发定制任务，进行自动打包代码，镜像上传和登录服务器进行脚本执行，完成部署 ✅</strong></p><ul><li>在项目根目录创建 <code>yml</code> 文件，用于配置自动化流程任务</li><li>mkdir .github</li><li>mkdir .github/workflows</li><li>vim .github/workflows/deploy.yml</li></ul><h3 id="yml-文件介绍-🐢" tabindex="-1"><a class="header-anchor" href="#yml-文件介绍-🐢"><span>yml 文件介绍 🐢</span></a></h3><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">CI/CD</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 触发条件为 push</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  push</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    branches</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">main</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    # 修改文件范围, 不在范围内不触发</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    paths</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;.github/workflows/**&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;__test__/**&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;src/**&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 任务</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">jobs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    # 运行的环境</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    runs-on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ubuntu-latest</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    # 步骤</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    steps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uses</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">actions/checkout@v2</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> # git pull</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Use Node.js</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        uses</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">actions/setup-node@v1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          node-version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">14</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">打包镜像, 上传 Docker Hub</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">|</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          docker login -u \${{ secrets.REGISTRY_USERNAME }} -p \${{ secrets.REGISTRY_PASSWORD }}</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          docker build --platform linux/amd64 -t [name]:latest  .</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          docker tag [name]:latest \${{ secrets.DOCKER_REPOSITORY }}</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          docker push \${{ secrets.DOCKER_REPOSITORY }}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">登录服务器, 执行脚本</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        uses</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">appleboy/ssh-action@master</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${{ secrets.REMOTE_HOST }}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          username</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">root</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          password</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${{ secrets.REMOTE_PASSWORD }}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">          # 执行脚本</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">|</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            ./deploy.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>\${{ secrets.REMOTE_PASSWORD }}</code> 变量主要存储一些敏感信息，配置位置如下图 <img src="`+e+'" alt="image.png" loading="lazy"></li></ul><h3 id="自动执行任务" tabindex="-1"><a class="header-anchor" href="#自动执行任务"><span>自动执行任务</span></a></h3><ul><li><p>成功截图 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6592e11183a6431e82c7e59e10b9dce6~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" loading="lazy"></p></li><li><p>失败 n 次截图 <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18417346ac7740b7833c4e18f4ed9fe3~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" loading="lazy"></p></li></ul><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语"><span>结语</span></a></h2><p>本次部署记录 📝 到此结束，其实整体没有难点，看着文档一点一点尝试，都可以完整的走完这个流程，技术日新月异，偶尔做一些工作职责之外的事，挺有意思 🏂</p><ul><li><a href="https://cli.vuejs.org/zh/guide/deployment.html#docker-nginx" target="_blank" rel="noopener noreferrer">vue-cli 官方文档部署章节</a></li><li><a href="https://docs.github.com/cn/actions/getting-started-with-github-actions" target="_blank" rel="noopener noreferrer">github actions 中文文档</a></li></ul>',19),p=[t];function r(d,c){return n(),i("div",null,p)}const o=s(l,[["render",r],["__file","Docker _ GitHub Active 自动部署.html.vue"]]),u=JSON.parse('{"path":"/%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%92%8C%E9%83%A8%E7%BD%B2/Docker%20_%20GitHub%20Active%20%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2.html","title":"Docker + GitHub Active 自动部署","lang":"zh-CN","frontmatter":{"highlight":"a11y-dark","theme":"qklhk-chocolate","title":"Docker + GitHub Active 自动部署","date":"2024-03-09T11:30:52.000Z","tags":"Docker","categories":["自动化部署"],"sticky":true,"star":true,"description":"Docker 介绍 🐳 Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。 镜像（Image） ：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的...","head":[["meta",{"property":"og:url","content":"https://github.com/zxl7/zxl7.github.io/%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%92%8C%E9%83%A8%E7%BD%B2/Docker%20_%20GitHub%20Active%20%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2.html"}],["meta",{"property":"og:site_name","content":"逆水行舟丨"}],["meta",{"property":"og:title","content":"Docker + GitHub Active 自动部署"}],["meta",{"property":"og:description","content":"Docker 介绍 🐳 Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。 镜像（Image） ：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6592e11183a6431e82c7e59e10b9dce6~tplv-k3u1fbpfcp-watermark.image?"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-03T13:15:26.000Z"}],["meta",{"property":"article:author","content":"逆水行舟丨"}],["meta",{"property":"article:published_time","content":"2024-03-09T11:30:52.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-03T13:15:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker + GitHub Active 自动部署\\",\\"image\\":[\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6592e11183a6431e82c7e59e10b9dce6~tplv-k3u1fbpfcp-watermark.image?\\",\\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18417346ac7740b7833c4e18f4ed9fe3~tplv-k3u1fbpfcp-watermark.image?\\"],\\"datePublished\\":\\"2024-03-09T11:30:52.000Z\\",\\"dateModified\\":\\"2024-09-03T13:15:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"逆水行舟丨\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Docker 介绍 🐳","slug":"docker-介绍-🐳","link":"#docker-介绍-🐳","children":[{"level":3,"title":"Docker 命令 🐳","slug":"docker-命令-🐳","link":"#docker-命令-🐳","children":[]}]},{"level":2,"title":"Docker 部署 🐳","slug":"docker-部署-🐳","link":"#docker-部署-🐳","children":[]},{"level":2,"title":"GitHub Active 自动部署 🐢","slug":"github-active-自动部署-🐢","link":"#github-active-自动部署-🐢","children":[{"level":3,"title":"yml 文件介绍 🐢","slug":"yml-文件介绍-🐢","link":"#yml-文件介绍-🐢","children":[]},{"level":3,"title":"自动执行任务","slug":"自动执行任务","link":"#自动执行任务","children":[]}]},{"level":2,"title":"结语","slug":"结语","link":"#结语","children":[]}],"git":{"createdTime":1725369326000,"updatedTime":1725369326000,"contributors":[{"name":"zxl7","email":"zhengxuelin@yhbj.cn","commits":1}]},"readingTime":{"minutes":3.94,"words":1182},"filePathRelative":"工程化和部署/Docker + GitHub Active 自动部署.md","localizedDate":"2024年3月9日","excerpt":"<h2>Docker 介绍 🐳</h2>\\n<p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p>\\n<ul>\\n<li><strong>镜像（Image）</strong> ：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</li>\\n<li><strong>容器（Container）</strong> ：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li>\\n<li><strong>仓库（Repository）</strong> ：仓库可看成一个代码控制中心，用来保存镜像。</li>\\n</ul>","autoDesc":true}');export{o as comp,u as data};
